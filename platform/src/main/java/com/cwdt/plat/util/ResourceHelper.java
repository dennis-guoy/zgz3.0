package com.cwdt.plat.util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import android.content.Context;

import com.blankj.utilcode.util.ObjectUtils;

/**
 * ResourceHelper
 * 
 * @author <a href="http://www.trinea.cn" target="_blank">Trinea</a> 2012-5-26
 */
public class ResourceHelper {

	private ResourceHelper() {
		throw new AssertionError();
	}

	/**
	 * get an asset using ACCESS_STREAMING mode. This provides access to files
	 * that have been bundled with an application as assets -- that is, files
	 * placed in to the "assets" directory.
	 * 
	 * @param context
	 * @param fileName
	 *            The name of the asset to open. This name can be hierarchical.
	 * @return
	 */
	public static String geFileFromAssets(Context context, String fileName) {
		if (context == null || ObjectUtils.isEmpty(fileName)) {
			return null;
		}

		StringBuilder s = new StringBuilder("");
		try {
			InputStreamReader in = new InputStreamReader(context.getResources()
					.getAssets().open(fileName));
			BufferedReader br = new BufferedReader(in);
			String line;
			while ((line = br.readLine()) != null) {
				s.append(line);
			}
			return s.toString();
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * get content from a raw resource. This can only be used with resources
	 * whose value is the name of an asset files -- that is, it can be used to
	 * open drawable, sound, and raw resources; it will fail on string and color
	 * resources.
	 * 
	 * @param context
	 * @param resId
	 *            The resource identifier to open, as generated by the appt
	 *            tool.
	 * @return
	 */
	public static String geFileFromRaw(Context context, int resId) {
		if (context == null) {
			return null;
		}

		StringBuilder s = new StringBuilder();
		try {
			InputStreamReader in = new InputStreamReader(context.getResources()
					.openRawResource(resId));
			BufferedReader br = new BufferedReader(in);
			String line;
			while ((line = br.readLine()) != null) {
				s.append(line);
			}
			return s.toString();
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * same to {@link ResourceHelper#geFileFromAssets(Context, String)}, but
	 * return type is List<String>
	 * 
	 * @param context
	 * @param fileName
	 * @return
	 */
	public static List<String> geFileToListFromAssets(Context context,
			String fileName) {
		if (context == null || ObjectUtils.isEmpty(fileName)) {
			return null;
		}

		List<String> fileContent = new ArrayList<String>();
		try {
			InputStreamReader in = new InputStreamReader(context.getResources()
					.getAssets().open(fileName));
			BufferedReader br = new BufferedReader(in);
			String line;
			while ((line = br.readLine()) != null) {
				fileContent.add(line);
			}
			br.close();
			return fileContent;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * same to {@link ResourceHelper#geFileFromRaw(Context, int)}, but return
	 * type is List<String>
	 * 
	 * @param context
	 * @param resId
	 * @return
	 */
	public static List<String> geFileToListFromRaw(Context context, int resId) {
		if (context == null) {
			return null;
		}

		List<String> fileContent = new ArrayList<String>();
		BufferedReader reader = null;
		try {
			InputStreamReader in = new InputStreamReader(context.getResources()
					.openRawResource(resId));
			reader = new BufferedReader(in);
			String line = null;
			while ((line = reader.readLine()) != null) {
				fileContent.add(line);
			}
			reader.close();
			return fileContent;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}
	
	/**
	 * 根据资源名称获取资源id
	 * @param paramContext
	 * @param paramString
	 * @return
	 */
	public static int getLayoutId(Context paramContext, String paramString) {
		return getResourceidByName(paramContext, "layout",paramString);
	}

	/**
	 * 根据资源名称获取资源id
	 * @param paramContext
	 * @param paramString
	 * @return
	 */
	public static int getStringId(Context paramContext, String paramString) {
		return getResourceidByName(paramContext, "string",paramString);
	}

	/**
	 * 根据资源名称获取资源id
	 * @param paramContext
	 * @param paramString
	 * @return
	 */
	public static int getDrawableId(Context paramContext, String paramString) {
		return getResourceidByName(paramContext, "drawable",paramString);
	}

	/**
	 * 根据资源名称获取资源id
	 * @param paramContext
	 * @param paramString
	 * @return
	 */
	public static int getStyleId(Context paramContext, String paramString) {
		return getResourceidByName(paramContext, "style",paramString);
	}

	/**
	 * 根据资源名称获取资源id
	 * @param paramContext
	 * @param paramString
	 * @return
	 */
	public static int getId(Context paramContext, String paramString) {
		return getResourceidByName(paramContext, "id",paramString);
	}

	/**
	 * 根据资源名称获取资源id
	 * @param paramContext
	 * @param paramString
	 * @return
	 */
	public static int getColorId(Context paramContext, String paramString) {
		return getResourceidByName(paramContext, "color",paramString);
	}

	/**
	 * 根据资源名称获取资源id
	 * @param paramContext
	 * @param paramString
	 * @return
	 */
	public static int getArrayId(Context paramContext, String paramString) {
		return getResourceidByName(paramContext, "array",paramString);
	}


	/**
	 * 根据资源名称及资源类型获取资源id
	 * @param paramContext
	 * @param restype
	 * @param paramString
	 * @return
	 */
	private static int getResourceidByName(Context paramContext,String restype,
			String paramString) {		
		return paramContext.getResources().getIdentifier(paramString, restype,
				paramContext.getPackageName());
	}

}
